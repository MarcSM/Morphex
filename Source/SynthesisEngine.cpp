/*
  ==============================================================================

    Synthesis.cpp
    Created: 19 Jul 2019 7:42:42pm
    Author:  Marc Sanchez Martinez

  ==============================================================================
*/

#include "SynthesisEngine.h"

#include "SMTUtils.h"
#include "SMTAudioHelpers.h"

SynthesisEngine::SynthesisEngine()
{
    // TODO - Change this fixes values with the line below
    fftOrder = 9; // 9 -> 2^9 = 512
    // int fftOrder = (int)log(yw.size())/log(2); // 9 -> 2^9 = 512
    fft = new dsp::FFT(fftOrder);
    
    this->window = this->generateWindow();
}

SynthesisEngine::~SynthesisEngine()
{
    
}

/**
 Synthesis of a sound using the sinusoidal model
 tfreq,tmag,tphase: frequencies, magnitudes and phases of sinusoids
 N: synthesis FFT size, H: hop size, fs: sampling rate
 returns y: output array sound
 */
std::vector<float> SynthesisEngine::sineModelSynth(std::vector<std::vector<float>> frequencies,
                                                   std::vector<std::vector<float>> magnitudes,
                                                   std::vector<std::vector<float>> phases,
                                                   int N, int H,
                                                   std::vector<float> synth_window,
                                                   int sample_rate)
{
    juce::dsp::Complex<float>* ifft_output = new juce::dsp::Complex<float>[N];
    float* ifft_output_real = new float[N];
    
    // TODO - Change this fixes values with the line below
    int fftOrder = 9; // 9 -> 2^9 = 512
    // int fftOrder = (int)log(yw.size())/log(2); // 9 -> 2^9 = 512
    
    dsp::FFT* fft = new dsp::FFT(fftOrder);
    
    int sound_size = (int) (H * ( (frequencies.size()) + 3));
    
    std::vector<float> harmonic(sound_size);
    
    std::vector<std::complex<float>> generated_sines(0);
    
    // Initialize the output sound write pointer
    int writePointer = 0;
    
    for (int i_frame = 0; i_frame < frequencies.size(); i_frame++)
    {
        // Generate sines
        generated_sines = genSpecSines(frequencies[i_frame],
                                       magnitudes[i_frame],
                                       phases[i_frame],
                                       N, sample_rate);
        
        // Perform the IFFT
        fft->perform(generated_sines.data(), ifft_output, true);
        
        // Get the real part, we don't get the second half because it's empty
        for (int i = 0; i < N; i++) ifft_output_real[i] = ifft_output[i].real();
        
        // Perform an FFT shift
        fftShift(ifft_output_real, N);
        
        // Applying the window and saving the result on the output vector "harmonic"
        for (int i=0; i<N; i++)
        {
            harmonic[writePointer+i] += synth_window[i] * ifft_output_real[i];
        }
        
        // Increaseing the pointer
        writePointer += H;
    }
    
    return harmonic;
};

/**
 Stochastic synthesis of a sound
 stocEnv: stochastic envelope; H: hop size; N: fft size
 returns y: output sound
 */
std::vector<float> SynthesisEngine::stochasticModelSynth(std::vector<std::vector<float>> stocEnv, int N, int H)
{
    std::vector<float> stochastic;
    
    return stochastic;
    
    //    if not(UF.isPower2(N)):                                     # raise error if N not a power of two
    //        raise ValueError("N is not a power of two")
    //
    //    hN = N//2+1                                                 # positive size of fft
    //    No2 = N//2                                                  # half of N
    //    L = stocEnv[:,0].size                                        # number of frames
    //    ysize = H*(L+3)                                             # output sound size
    //    y = np.zeros(ysize)                                         # initialize output array
    //    ws = 2*hanning(N)                                            # synthesis window
    //    pout = 0                                                     # output sound pointer
    //    for l in range(L):
    //        mY = resample(stocEnv[l,:], hN)                        # interpolate to original size
    //        pY = 2*np.pi*np.random.rand(hN)                        # generate phase random values
    //        Y = np.zeros(N, dtype = complex)                       # initialize synthesis spectrum
    //        Y[:hN] = 10**(mY/20) * np.exp(1j*pY)                   # generate positive freq.
    //        Y[hN:] = 10**(mY[-2:0:-1]/20) * np.exp(-1j*pY[-2:0:-1]) # generate negative freq.
    //        fftbuffer = np.real(ifft(Y))                           # inverse FFT
    //        y[pout:pout+N] += ws*fftbuffer                         # overlap-add
    //        pout += H
    //    y = np.delete(y, range(No2))                              # delete half of first window
    //    y = np.delete(y, range(y.size-No2, y.size))               # delete half of the last window
    //    return y
};

/* Private */

std::vector<float> SynthesisEngine::generateWindow()
{
    // Define the window
    // TODO change this line to get the window dynamicaly
    //    std::vector<double> ow = dsp::WindowingFunction<double>::triangular(2*H);
    ow = {  0.003906250000000, 0.011718750000000, 0.019531250000000, 0.027343750000000,
            0.035156250000000, 0.042968750000000, 0.050781250000000, 0.058593750000000,
            0.066406250000000, 0.074218750000000, 0.082031250000000, 0.089843750000000,
            0.097656250000000, 0.105468750000000, 0.113281250000000, 0.121093750000000,
            0.128906250000000, 0.136718750000000, 0.144531250000000, 0.152343750000000,
            0.160156250000000, 0.167968750000000, 0.175781250000000, 0.183593750000000,
            0.191406250000000, 0.199218750000000, 0.207031250000000, 0.214843750000000,
            0.222656250000000, 0.230468750000000, 0.238281250000000, 0.246093750000000,
            0.253906250000000, 0.261718750000000, 0.269531250000000, 0.277343750000000,
            0.285156250000000, 0.292968750000000, 0.300781250000000, 0.308593750000000,
            0.316406250000000, 0.324218750000000, 0.332031250000000, 0.339843750000000,
            0.347656250000000, 0.355468750000000, 0.363281250000000, 0.371093750000000,
            0.378906250000000, 0.386718750000000, 0.394531250000000, 0.402343750000000,
            0.410156250000000, 0.417968750000000, 0.425781250000000, 0.433593750000000,
            0.441406250000000, 0.449218750000000, 0.457031250000000, 0.464843750000000,
            0.472656250000000, 0.480468750000000, 0.488281250000000, 0.496093750000000,
            0.503906250000000, 0.511718750000000, 0.519531250000000, 0.527343750000000,
            0.535156250000000, 0.542968750000000, 0.550781250000000, 0.558593750000000,
            0.566406250000000, 0.574218750000000, 0.582031250000000, 0.589843750000000,
            0.597656250000000, 0.605468750000000, 0.613281250000000, 0.621093750000000,
            0.628906250000000, 0.636718750000000, 0.644531250000000, 0.652343750000000,
            0.660156250000000, 0.667968750000000, 0.675781250000000, 0.683593750000000,
            0.691406250000000, 0.699218750000000, 0.707031250000000, 0.714843750000000,
            0.722656250000000, 0.730468750000000, 0.738281250000000, 0.746093750000000,
            0.753906250000000, 0.761718750000000, 0.769531250000000, 0.777343750000000,
            0.785156250000000, 0.792968750000000, 0.800781250000000, 0.808593750000000,
            0.816406250000000, 0.824218750000000, 0.832031250000000, 0.839843750000000,
            0.847656250000000, 0.855468750000000, 0.863281250000000, 0.871093750000000,
            0.878906250000000, 0.886718750000000, 0.894531250000000, 0.902343750000000,
            0.910156250000000, 0.917968750000000, 0.925781250000000, 0.933593750000000,
            0.941406250000000, 0.949218750000000, 0.957031250000000, 0.964843750000000,
            0.972656250000000, 0.980468750000000, 0.988281250000000, 0.996093750000000,
            0.996093750000000, 0.988281250000000, 0.980468750000000, 0.972656250000000,
            0.964843750000000, 0.957031250000000, 0.949218750000000, 0.941406250000000,
            0.933593750000000, 0.925781250000000, 0.917968750000000, 0.910156250000000,
            0.902343750000000, 0.894531250000000, 0.886718750000000, 0.878906250000000,
            0.871093750000000, 0.863281250000000, 0.855468750000000, 0.847656250000000,
            0.839843750000000, 0.832031250000000, 0.824218750000000, 0.816406250000000,
            0.808593750000000, 0.800781250000000, 0.792968750000000, 0.785156250000000,
            0.777343750000000, 0.769531250000000, 0.761718750000000, 0.753906250000000,
            0.746093750000000, 0.738281250000000, 0.730468750000000, 0.722656250000000,
            0.714843750000000, 0.707031250000000, 0.699218750000000, 0.691406250000000,
            0.683593750000000, 0.675781250000000, 0.667968750000000, 0.660156250000000,
            0.652343750000000, 0.644531250000000, 0.636718750000000, 0.628906250000000,
            0.621093750000000, 0.613281250000000, 0.605468750000000, 0.597656250000000,
            0.589843750000000, 0.582031250000000, 0.574218750000000, 0.566406250000000,
            0.558593750000000, 0.550781250000000, 0.542968750000000, 0.535156250000000,
            0.527343750000000, 0.519531250000000, 0.511718750000000, 0.503906250000000,
            0.496093750000000, 0.488281250000000, 0.480468750000000, 0.472656250000000,
            0.464843750000000, 0.457031250000000, 0.449218750000000, 0.441406250000000,
            0.433593750000000, 0.425781250000000, 0.417968750000000, 0.410156250000000,
            0.402343750000000, 0.394531250000000, 0.386718750000000, 0.378906250000000,
            0.371093750000000, 0.363281250000000, 0.355468750000000, 0.347656250000000,
            0.339843750000000, 0.332031250000000, 0.324218750000000, 0.316406250000000,
            0.308593750000000, 0.300781250000000, 0.292968750000000, 0.285156250000000,
            0.277343750000000, 0.269531250000000, 0.261718750000000, 0.253906250000000,
            0.246093750000000, 0.238281250000000, 0.230468750000000, 0.222656250000000,
            0.214843750000000, 0.207031250000000, 0.199218750000000, 0.191406250000000,
            0.183593750000000, 0.175781250000000, 0.167968750000000, 0.160156250000000,
            0.152343750000000, 0.144531250000000, 0.136718750000000, 0.128906250000000,
            0.121093750000000, 0.113281250000000, 0.105468750000000, 0.097656250000000,
            0.089843750000000, 0.082031250000000, 0.074218750000000, 0.066406250000000,
            0.058593750000000, 0.050781250000000, 0.042968750000000, 0.035156250000000,
            0.027343750000000, 0.019531250000000, 0.011718750000000, 0.003906250000000  };
    
    //    std::vector<double> bh = blackmanharris(NS);
    bh = {  0.000060000000000, 0.000062139344082, 0.000068566817878, 0.000079310745962,
            0.000094418335719, 0.000113955676934, 0.000138007741161, 0.000166678380767,
            0.000200090327580, 0.000238385191012, 0.000281723455517, 0.000330284477245,
            0.000384266479685, 0.000443886548130, 0.000509380622730, 0.000581003489899,
            0.000659028771833, 0.000743748913852, 0.000835475169295, 0.000934537581644,
            0.001041284963576, 0.001156084872586, 0.001279323582850, 0.001411406052937,
            0.001552755889024, 0.001703815303196, 0.001865045066435, 0.002036924455896,
            0.002219951196034, 0.002414641393156, 0.002621529462954, 0.002841168050574,
            0.003074127942773, 0.003320997971689, 0.003582384909781, 0.003858913355460,
            0.004151225608946, 0.004459981537882, 0.004785858432239, 0.005129550848037,
            0.005491770439422, 0.005873245778630, 0.006274722163392, 0.006696961411305,
            0.007140741640745, 0.007606857037868, 0.008096117609271, 0.008609348919898,
            0.009147391815775, 0.009711102131170, 0.010301350379811, 0.010919021429764,
            0.011565014161641, 0.012240241109777, 0.012945628086058, 0.013682113786100,
            0.014450649377485, 0.015252198069785, 0.016087734666135, 0.016958245096122,
            0.017864725929794, 0.018808183872601, 0.019789635241124, 0.020810105419447,
            0.021870628296088, 0.022972245681380, 0.024116006705284, 0.025302967195586,
            0.026534189036490, 0.027810739507641, 0.029133690603639, 0.030504118334136,
            0.031923102004635, 0.033391723478151, 0.034911066417908, 0.036482215511293,
            0.038106255675317, 0.039784271243844, 0.041517345136924, 0.043306558012543,
            0.045152987401189, 0.047057706823624, 0.049021784892306, 0.051046284396926,
            0.053132261374573, 0.055280764165047, 0.057492832451892, 0.059769496289745,
            0.062111775118630, 0.064520676765843, 0.066997196436133, 0.069542315690885,
            0.072157001417050, 0.074842204786606, 0.077598860207344, 0.080427884265814,
            0.083330174663288, 0.086306609145618, 0.089358044427904, 0.092485315114896,
            0.095689232618090, 0.098970584070497, 0.102330131240081, 0.105768609442885,
            0.109286726456885, 0.112885161437635, 0.116564563836768, 0.120325552324450,
            0.124168713716890, 0.128094601910031, 0.132103736820542, 0.136196603335268,
            0.140373650270282, 0.144635289340699, 0.148981894142433, 0.153413799147049,
            0.157931298710919, 0.162534646099834, 0.167224052530275, 0.171999686228516,
            0.176861671508757, 0.181810087871436, 0.186844969122933, 0.191966302517803,
            0.197174027924721, 0.202468037017279, 0.207848172490792, 0.213314227306225,
            0.218865943962377, 0.224503013797416, 0.230225076320852, 0.236031718577017,
            0.241922474541110, 0.247896824548816, 0.253954194760533, 0.260093956661166,
            0.266315426596458, 0.272617865346790, 0.279000477739350, 0.285462412299547,
            0.292002760942513, 0.298620558705513, 0.305314783522029, 0.312084356038278,
            0.318928139472861, 0.325844939520224, 0.332833504298565, 0.339892524342781,
            0.347020632643013, 0.354216404729307, 0.361478358802856, 0.368804955914269,
            0.376194600189234, 0.383645639101942, 0.391156363796541, 0.398725009456897,
            0.406349755724850, 0.414028727167127, 0.421759993791025, 0.429541571608912,
            0.437371423251573, 0.445247458630354, 0.453167535648018, 0.461129460958171,
            0.469130990773080, 0.477169831719637, 0.485243641743174, 0.493350031058812,
            0.501486563149919, 0.509650755813267, 0.517840082250383, 0.526051972204545,
            0.534283813142843, 0.542532951482663, 0.550796693861889, 0.559072308452095,
            0.567357026313935, 0.575648042793890, 0.583942518961494, 0.592237583086098,
            0.600530332152203, 0.608817833412340, 0.617097125976415, 0.625365222436429,
            0.633619110525405, 0.641855754809329, 0.650072098410871, 0.658265064763615,
            0.666431559395471, 0.674568471739932, 0.682672676973777, 0.690741037879815,
            0.698770406733186, 0.706757627209769, 0.714699536315144, 0.722592966332590,
            0.730434746788520, 0.738221706433780, 0.745950675239155, 0.753618486403469,
            0.761221978372580, 0.768757996867602, 0.776223396920641, 0.783615044916323,
            0.790929820637372, 0.798164619312509, 0.805316353664885, 0.812381955959303,
            0.819358380046439, 0.826242603402289, 0.833031629161056, 0.839722488139690,
            0.846312240852296, 0.852797979512633, 0.859176830022915, 0.865445953947152,
            0.871602550467255, 0.877643858320170, 0.883567157714266, 0.889369772223284,
            0.895049070656104, 0.900602468900649, 0.906027431740241, 0.911321474640759,
            0.916482165506955, 0.921507126406329, 0.926394035258975, 0.931140627491835,
            0.935744697655852, 0.940204101004513, 0.944516755032326, 0.948680640971806,
            0.952693805247572, 0.956554360886212, 0.960260488880593, 0.963810439507347,
            0.967202533596301, 0.970435163750661, 0.973506795516808, 0.976415968502607,
            0.979161297443183, 0.981741473213154, 0.984155263784374, 0.986401515128281,
            0.988479152061999, 0.990387179037402, 0.992124680872378, 0.993690823423623,
            0.995084854200311, 0.996306102918071, 0.997353981992738, 0.998227986973420,
            0.998927696914453, 0.999452774685918, 0.999802967222397, 0.999978105709755,
            0.999978105709755, 0.999802967222397, 0.999452774685918, 0.998927696914453,
            0.998227986973420, 0.997353981992738, 0.996306102918071, 0.995084854200311,
            0.993690823423623, 0.992124680872378, 0.990387179037402, 0.988479152061999,
            0.986401515128281, 0.984155263784374, 0.981741473213154, 0.979161297443183,
            0.976415968502607, 0.973506795516808, 0.970435163750661, 0.967202533596301,
            0.963810439507347, 0.960260488880593, 0.956554360886212, 0.952693805247572,
            0.948680640971806, 0.944516755032326, 0.940204101004513, 0.935744697655852,
            0.931140627491835, 0.926394035258975, 0.921507126406330, 0.916482165506955,
            0.911321474640759, 0.906027431740241, 0.900602468900649, 0.895049070656104,
            0.889369772223284, 0.883567157714266, 0.877643858320170, 0.871602550467255,
            0.865445953947152, 0.859176830022915, 0.852797979512633, 0.846312240852296,
            0.839722488139690, 0.833031629161056, 0.826242603402289, 0.819358380046439,
            0.812381955959303, 0.805316353664885, 0.798164619312509, 0.790929820637372,
            0.783615044916323, 0.776223396920642, 0.768757996867602, 0.761221978372580,
            0.753618486403469, 0.745950675239155, 0.738221706433780, 0.730434746788520,
            0.722592966332590, 0.714699536315145, 0.706757627209769, 0.698770406733187,
            0.690741037879815, 0.682672676973777, 0.674568471739932, 0.666431559395471,
            0.658265064763615, 0.650072098410871, 0.641855754809329, 0.633619110525405,
            0.625365222436429, 0.617097125976415, 0.608817833412340, 0.600530332152203,
            0.592237583086098, 0.583942518961494, 0.575648042793890, 0.567357026313935,
            0.559072308452096, 0.550796693861889, 0.542532951482664, 0.534283813142843,
            0.526051972204545, 0.517840082250383, 0.509650755813268, 0.501486563149919,
            0.493350031058812, 0.485243641743174, 0.477169831719637, 0.469130990773080,
            0.461129460958171, 0.453167535648018, 0.445247458630355, 0.437371423251573,
            0.429541571608912, 0.421759993791026, 0.414028727167127, 0.406349755724850,
            0.398725009456897, 0.391156363796541, 0.383645639101942, 0.376194600189234,
            0.368804955914269, 0.361478358802856, 0.354216404729307, 0.347020632643014,
            0.339892524342781, 0.332833504298565, 0.325844939520224, 0.318928139472862,
            0.312084356038278, 0.305314783522029, 0.298620558705513, 0.292002760942513,
            0.285462412299547, 0.279000477739351, 0.272617865346791, 0.266315426596458,
            0.260093956661166, 0.253954194760533, 0.247896824548816, 0.241922474541110,
            0.236031718577017, 0.230225076320852, 0.224503013797416, 0.218865943962377,
            0.213314227306225, 0.207848172490792, 0.202468037017279, 0.197174027924721,
            0.191966302517804, 0.186844969122933, 0.181810087871437, 0.176861671508757,
            0.171999686228516, 0.167224052530275, 0.162534646099835, 0.157931298710920,
            0.153413799147049, 0.148981894142433, 0.144635289340700, 0.140373650270282,
            0.136196603335268, 0.132103736820542, 0.128094601910031, 0.124168713716890,
            0.120325552324450, 0.116564563836769, 0.112885161437635, 0.109286726456885,
            0.105768609442885, 0.102330131240081, 0.098970584070497, 0.095689232618090,
            0.092485315114896, 0.089358044427904, 0.086306609145618, 0.083330174663288,
            0.080427884265814, 0.077598860207344, 0.074842204786606, 0.072157001417050,
            0.069542315690885, 0.066997196436133, 0.064520676765843, 0.062111775118630,
            0.059769496289745, 0.057492832451892, 0.055280764165047, 0.053132261374573,
            0.051046284396926, 0.049021784892306, 0.047057706823624, 0.045152987401189,
            0.043306558012543, 0.041517345136924, 0.039784271243844, 0.038106255675317,
            0.036482215511294, 0.034911066417908, 0.033391723478151, 0.031923102004635,
            0.030504118334136, 0.029133690603639, 0.027810739507641, 0.026534189036490,
            0.025302967195586, 0.024116006705284, 0.022972245681380, 0.021870628296088,
            0.020810105419447, 0.019789635241124, 0.018808183872601, 0.017864725929794,
            0.016958245096122, 0.016087734666135, 0.015252198069785, 0.014450649377485,
            0.013682113786100, 0.012945628086058, 0.012240241109777, 0.011565014161641,
            0.010919021429764, 0.010301350379811, 0.009711102131170, 0.009147391815775,
            0.008609348919898, 0.008096117609271, 0.007606857037868, 0.007140741640745,
            0.006696961411305, 0.006274722163392, 0.005873245778630, 0.005491770439422,
            0.005129550848037, 0.004785858432239, 0.004459981537882, 0.004151225608946,
            0.003858913355460, 0.003582384909781, 0.003320997971689, 0.003074127942773,
            0.002841168050574, 0.002621529462954, 0.002414641393156, 0.002219951196034,
            0.002036924455896, 0.001865045066435, 0.001703815303196, 0.001552755889024,
            0.001411406052937, 0.001279323582850, 0.001156084872586, 0.001041284963576,
            0.000934537581644, 0.000835475169295, 0.000743748913852, 0.000659028771833,
            0.000581003489899, 0.000509380622730, 0.000443886548130, 0.000384266479685,
            0.000330284477245, 0.000281723455517, 0.000238385191012, 0.000200090327580,
            0.000166678380767, 0.000138007741161, 0.000113955676934, 0.000094418335719,
            0.000079310745962, 0.000068566817878, 0.000062139344082, 0.000060000000000  };
    
    int NS = 512; // size of fft used in synthesis
    int H = int(NS/4); // hop size (has to be 1/4 of NS) - 128
    int hN = (int)NS/2;
    
    std::vector<float> synth_window(NS);
    std::vector<float> d_synth_window(NS);
    
    int i_synth_window = 0;
    for (int i=0; i<ow.size(); i++) {
        i_synth_window = i+hN-H;
        d_synth_window[i_synth_window] = ow[i];
    }
    
    double sum_of_bh = std::accumulate(bh.begin(), bh.end(), 0.0);
    
    for (int i=0; i<bh.size(); i++)  bh[i] = bh[i]/sum_of_bh;
    
    for (int i=(hN-H); i<(hN+H); i++) synth_window[i] = (float)(d_synth_window[i]/bh[i]);
    
    return synth_window;
}
